From 7edaefdc1d80aefdbbc2dc52526c20715759da83 Mon Sep 17 00:00:00 2001
From: fujiwarat <takao.fujiwara1@gmail.com>
Date: Wed, 22 Aug 2018 17:20:53 +0900
Subject: [PATCH] ui/gtk3: Do not clear unicode data when emoji annotation lang
 is changed

---
 ui/gtk3/emojier.vala | 8 ++++++--
 1 file changed, 6 insertions(+), 2 deletions(-)

diff --git a/ui/gtk3/emojier.vala b/ui/gtk3/emojier.vala
index 85dcdceb..637ae049 100644
--- a/ui/gtk3/emojier.vala
+++ b/ui/gtk3/emojier.vala
@@ -440,13 +440,17 @@ public class IBusEmojier : Gtk.ApplicationWindow {
         m_emoji_to_emoji_variants_dict =
                 new GLib.HashTable<string, GLib.SList<string>>(GLib.str_hash,
                                                                GLib.str_equal);
-        m_unicode_to_data_dict =
+        if (m_unicode_to_data_dict == null) {
+            m_unicode_to_data_dict =
                 new GLib.HashTable<unichar, IBus.UnicodeData>(
                         GLib.direct_hash,
                         GLib.direct_equal);
-        m_name_to_unicodes_dict =
+        }
+        if (m_name_to_unicodes_dict == null) {
+            m_name_to_unicodes_dict =
                 new GLib.HashTable<string, GLib.SList<unichar>>(GLib.str_hash,
                                                                 GLib.str_equal);
+        }
     }
 
 
-- 
2.17.1

From 28d22176aee6be97d88dd6c60fa5395c79563ec0 Mon Sep 17 00:00:00 2001
From: fujiwarat <takao.fujiwara1@gmail.com>
Date: Thu, 30 Aug 2018 12:57:33 +0900
Subject: [PATCH] ui/gtk3: Fix SEGV when type ASCII on emojier

Emojier still included Gtk.Entry, accepted key events in Wayland,
reset the lookup table and it caused SEGV because IBus.Text
is NULL in the lookup table in Emojier.get_current_candidate().
Now Gtk.Entry is deleted completely.

BUG=rhbz#1618682
---
 ui/gtk3/emojier.vala | 139 +------------------------------------------
 1 file changed, 1 insertion(+), 138 deletions(-)

diff --git a/ui/gtk3/emojier.vala b/ui/gtk3/emojier.vala
index 637ae049..0f455800 100644
--- a/ui/gtk3/emojier.vala
+++ b/ui/gtk3/emojier.vala
@@ -283,7 +283,6 @@ public class IBusEmojier : Gtk.ApplicationWindow {
 
     private ThemedRGBA m_rgba;
     private Gtk.Box m_vbox;
-    private EEntry m_entry;
     /* If emojier is emoji category list or Unicode category list,
      * m_annotation is "" and preedit is also "".
      * If emojier is candidate mode, m_annotation is an annotation and
@@ -367,23 +366,6 @@ public class IBusEmojier : Gtk.ApplicationWindow {
         m_vbox = new Gtk.Box(Gtk.Orientation.VERTICAL, 0);
         add(m_vbox);
 
-        m_entry = new EEntry();
-        m_entry.set_placeholder_text(_("Type annotation or choose emoji"));
-        //m_vbox.add(m_entry);
-        m_entry.changed.connect(() => {
-            update_candidate_window();
-        });
-        m_entry.icon_release.connect((icon_pos, event) => {
-            hide_candidate_panel();
-        });
-
-        /* Set the accessible role of the label to a status bar so it
-         * will emit name changed events that can be used by screen
-         * readers.
-         */
-        Atk.Object obj = m_entry.get_accessible();
-        obj.set_role (Atk.Role.STATUSBAR);
-
         // The constructor of IBus.LookupTable does not support more than
         // 16 pages.
         m_lookup_table = new IBus.LookupTable(1, 0, true, true);
@@ -1806,18 +1788,6 @@ public class IBusEmojier : Gtk.ApplicationWindow {
                 m_lookup_table.cursor_up();
             else if (keyval == Gdk.Key.Right)
                 m_lookup_table.cursor_down();
-        } else if (m_entry.get_text().length > 0) {
-            int step = 0;
-            if (keyval == Gdk.Key.Left)
-                step = -1;
-            else if (keyval == Gdk.Key.Right)
-                step = 1;
-            GLib.Signal.emit_by_name(
-                    m_entry, "move-cursor",
-                    Gtk.MovementStep.VISUAL_POSITIONS,
-                    step,
-                    (modifiers & Gdk.ModifierType.SHIFT_MASK) != 0
-                            ? true : false);
         } else {
             // For Gdk.Key.f and Gdk.Key.b
             if (keyval == Gdk.Key.Left)
@@ -1880,20 +1850,6 @@ public class IBusEmojier : Gtk.ApplicationWindow {
             }
             return true;
         }
-        if (m_entry.get_text().length > 0) {
-            int step = 0;
-            if (keyval == Gdk.Key.Home)
-                step = -1;
-            else if (keyval == Gdk.Key.End)
-                step = 1;
-            GLib.Signal.emit_by_name(
-                    m_entry, "move-cursor",
-                    Gtk.MovementStep.DISPLAY_LINE_ENDS,
-                    step,
-                    (modifiers & Gdk.ModifierType.SHIFT_MASK) != 0
-                            ? true : false);
-            return true;
-        }
         return category_list_cursor_move(keyval);
     }
 
@@ -1941,28 +1897,6 @@ public class IBusEmojier : Gtk.ApplicationWindow {
     }
 
 
-    private void entry_enter_keyval(uint keyval) {
-        unichar ch = IBus.keyval_to_unicode(keyval);
-        if (ch.iscntrl())
-            return;
-        string str = ch.to_string();
-
-        // what gtk_entry_commit_cb() do
-        if (m_entry.get_selection_bounds(null, null)) {
-            m_entry.delete_selection();
-        } else {
-            if (m_entry.get_overwrite_mode()) {
-               uint text_length = m_entry.get_buffer().get_length();
-               if (m_entry.cursor_position < text_length)
-                   m_entry.delete_from_cursor(Gtk.DeleteType.CHARS, 1);
-            }
-        }
-        int pos = m_entry.get_position();
-        m_entry.insert_text(str, -1, ref pos);
-        m_entry.set_position(pos);
-    }
-
-
     private Gdk.Rectangle get_monitor_geometry() {
         Gdk.Rectangle monitor_area = { 0, };
 
@@ -2245,10 +2179,7 @@ public class IBusEmojier : Gtk.ApplicationWindow {
         /* Let gtk recalculate the window size. */
         resize(1, 1);
 
-        m_entry.set_text("");
-
         show_category_list();
-        m_entry.set_activates_default(true);
         show_all();
 
         /* Some window managers, e.g. MATE, GNOME, Plasma desktops,
@@ -2289,13 +2220,6 @@ public class IBusEmojier : Gtk.ApplicationWindow {
         m_loop.run();
         m_loop = null;
 
-        // Need focus-out on Gtk.Entry to send the emoji to applications.
-        Gdk.Event fevent = new Gdk.Event(Gdk.EventType.FOCUS_CHANGE);
-        fevent.focus_change.in = 0;
-        fevent.focus_change.window  = get_window();
-        m_entry.send_focus_change(fevent);
-        fevent.focus_change.window  = null;
-
         hide();
         // Make sure the switcher is hidden before returning from this function.
         while (Gtk.events_pending())
@@ -2357,36 +2281,9 @@ public class IBusEmojier : Gtk.ApplicationWindow {
                 hide();
             }
             return true;
-        case Gdk.Key.BackSpace:
-            if (m_entry.get_text().length > 0) {
-                if ((modifiers & Gdk.ModifierType.CONTROL_MASK) != 0) {
-                    GLib.Signal.emit_by_name(m_entry, "delete-from-cursor",
-                                             Gtk.DeleteType.WORD_ENDS, -1);
-                } else {
-                    GLib.Signal.emit_by_name(m_entry, "backspace");
-                }
-                return true;
-            }
-            break;
-        case Gdk.Key.Delete:
-        case Gdk.Key.KP_Delete:
-            if (m_entry.get_text().length > 0) {
-                if ((modifiers & Gdk.ModifierType.CONTROL_MASK) != 0) {
-                    GLib.Signal.emit_by_name(m_entry, "delete-from-cursor",
-                                             Gtk.DeleteType.WORD_ENDS, 1);
-                } else {
-                    GLib.Signal.emit_by_name(m_entry, "delete-from-cursor",
-                                             Gtk.DeleteType.CHARS, 1);
-                }
-                return true;
-            }
-            break;
         case Gdk.Key.space:
         case Gdk.Key.KP_Space:
-            if ((modifiers & Gdk.ModifierType.SHIFT_MASK) != 0) {
-                if (m_entry.get_text().length > 0)
-                    entry_enter_keyval(keyval);
-            } else if (m_candidate_panel_is_visible) {
+            if (m_candidate_panel_is_visible) {
                 enter_notify_disable_with_timer();
                 m_lookup_table.cursor_down();
                 show_candidate_panel();
@@ -2436,10 +2333,6 @@ public class IBusEmojier : Gtk.ApplicationWindow {
             key_press_cursor_home_end(Gdk.Key.End, modifiers);
             show_all();
             return true;
-        case Gdk.Key.Insert:
-        case Gdk.Key.KP_Insert:
-            GLib.Signal.emit_by_name(m_entry, "toggle-overwrite");
-            return true;
         }
 
         if ((modifiers & Gdk.ModifierType.CONTROL_MASK) != 0) {
@@ -2470,27 +2363,6 @@ public class IBusEmojier : Gtk.ApplicationWindow {
                 key_press_cursor_home_end(Gdk.Key.End, modifiers);
                 show_all();
                 return true;
-            case Gdk.Key.u:
-                if (m_entry.get_text().length > 0) {
-                    GLib.Signal.emit_by_name(m_entry,
-                                             "delete-from-cursor",
-                                             Gtk.DeleteType.PARAGRAPH_ENDS,
-                                             -1);
-                    return true;
-                }
-                break;
-            case Gdk.Key.a:
-                if (m_entry.get_text().length > 0) {
-                    m_entry.select_region(0, -1);
-                    return true;
-                }
-                break;
-            case Gdk.Key.x:
-                if (m_entry.get_text().length > 0) {
-                    GLib.Signal.emit_by_name(m_entry, "cut-clipboard");
-                    return true;
-                }
-                break;
             case Gdk.Key.C:
             case Gdk.Key.c:
                 if ((modifiers & Gdk.ModifierType.SHIFT_MASK) != 0) {
@@ -2503,19 +2375,11 @@ public class IBusEmojier : Gtk.ApplicationWindow {
                         clipboard.store();
                         return true;
                     }
-                } else if (m_entry.get_text().length > 0) {
-                    GLib.Signal.emit_by_name(m_entry, "copy-clipboard");
-                    return true;
                 }
                 break;
-            case Gdk.Key.v:
-                GLib.Signal.emit_by_name(m_entry, "paste-clipboard");
-                return true;
             }
             return false;
         }
-
-        entry_enter_keyval(keyval);
         return true;
     }
 
@@ -2595,7 +2459,6 @@ public class IBusEmojier : Gtk.ApplicationWindow {
 
         uint32 timestamp = event.get_time();
         present_with_time(timestamp);
-        m_entry.set_activates_default(true);
     }
 
 
-- 
2.17.1

From e6badb494e0a31b7aca3a5078a5dc5b27b83390d Mon Sep 17 00:00:00 2001
From: fujiwarat <takao.fujiwara1@gmail.com>
Date: Thu, 30 Aug 2018 12:57:46 +0900
Subject: [PATCH] ui/gtk3: Support Shift-Space to insert a Space on Emojier
 preedit

Implemented Shift-Space on preedit since Shift-Space had worked on
Emojier's GtkEntry in the previous release.
---
 ui/gtk3/panelbinding.vala | 27 ++++++++++++++++++++-------
 1 file changed, 20 insertions(+), 7 deletions(-)

diff --git a/ui/gtk3/panelbinding.vala b/ui/gtk3/panelbinding.vala
index 981b5509..4ebff8da 100644
--- a/ui/gtk3/panelbinding.vala
+++ b/ui/gtk3/panelbinding.vala
@@ -548,6 +548,19 @@ class PanelBinding : IBus.PanelService {
     }
 
 
+    private bool key_press_keyval(uint keyval) {
+        unichar ch = IBus.keyval_to_unicode(keyval);
+        if (ch.iscntrl())
+                return false;
+        string str = ch.to_string();
+        m_preedit.append_text(str);
+        string annotation = m_preedit.get_text();
+        m_emojier.set_annotation(annotation);
+        m_preedit.set_emoji("");
+        return true;
+    }
+
+
     private bool key_press_enter() {
         if (m_extension_name != "unicode" && is_emoji_lookup_table()) {
             // Check if variats exist
@@ -899,6 +912,12 @@ class PanelBinding : IBus.PanelService {
             break;
         case Gdk.Key.space:
         case Gdk.Key.KP_Space:
+            if ((modifiers & Gdk.ModifierType.SHIFT_MASK) != 0) {
+                if (!key_press_keyval(keyval))
+                    return true;
+                show_candidate = is_emoji_lookup_table();
+                break;
+            }
             show_candidate = key_press_space();
             if (m_extension_name == "unicode") {
                 key_press_enter();
@@ -979,14 +998,8 @@ class PanelBinding : IBus.PanelService {
                 show_candidate = key_press_control_keyval(keyval, modifiers);
                 break;
             }
-            unichar ch = IBus.keyval_to_unicode(keyval);
-            if (ch.iscntrl())
+            if (!key_press_keyval(keyval))
                 return true;
-            string str = ch.to_string();
-            m_preedit.append_text(str);
-            string annotation = m_preedit.get_text();
-            m_emojier.set_annotation(annotation);
-            m_preedit.set_emoji("");
             show_candidate = is_emoji_lookup_table();
             break;
         }
-- 
2.17.1

From 809d880337e75b7cee429292a238bf53899bef6a Mon Sep 17 00:00:00 2001
From: fujiwarat <takao.fujiwara1@gmail.com>
Date: Thu, 30 Aug 2018 12:58:57 +0900
Subject: [PATCH] ui/gtk3: Do not move Emojier popup with the active
 candidate in Xorg

Probably I think it's not useful to change the popup position frequently.
The popup size is always slightly changed with the emoji annotation length.
---
 ui/gtk3/emojier.vala | 10 +++++++++-
 1 file changed, 9 insertions(+), 1 deletion(-)

diff --git a/ui/gtk3/emojier.vala b/ui/gtk3/emojier.vala
index 0f455800..9811fde5 100644
--- a/ui/gtk3/emojier.vala
+++ b/ui/gtk3/emojier.vala
@@ -1944,7 +1944,15 @@ public class IBusEmojier : Gtk.ApplicationWindow {
             x = 0;
 
         bool changed = false;
-        if (window_right_bottom.y > monitor_bottom) {
+        // Do not up side down frequently.
+        // The first pos does not show the lookup table yet but the
+        // preedit only and the second pos shows the lookup table.
+        if (m_lookup_table.get_cursor_pos() != 1) {
+            if (m_is_up_side_down)
+                y = m_cursor_location.y - allocation.height;
+            else
+                y = cursor_right_bottom.y;
+        } else if (window_right_bottom.y > monitor_bottom) {
             y = m_cursor_location.y - allocation.height;
             // Do not up side down in Wayland
             if (m_input_context_path == "") {
-- 
2.17.1

From 1c6565e205528a45e88a84ba2a328f9035875c8d Mon Sep 17 00:00:00 2001
From: fujiwarat <takao.fujiwara1@gmail.com>
Date: Fri, 14 Sep 2018 16:15:41 +0900
Subject: [PATCH] ui/gtk3: Fix SEGV when commit an emoji on Emojier in Wayland

Just pressing Space key without emoji annotations can launch Emojier
popup and the popup takes a focus in Wayland and the chosen emoji is
output when the original text application gets the focus after Emojier
popup release the focus. Emojier disabled Ctrl-Shift-e after got the focus.
But currently GNOME Wayland has a bug not to send focus-in until a
key press or mouse click happens [1] and Emojier causes a SEGV.
Now Emojier disables Ctrl-Shift-e immediately when an emoji is chosen
whether focus-in comes or not and fixes the SEGV.

[1] https://gitlab.gnome.org/GNOME/gnome-shell/issues/573

BUG=rhbz#1625187
---
 ui/gtk3/emojier.vala      | 63 +++++++-------------------------------
 ui/gtk3/emojierapp.vala   |  2 +-
 ui/gtk3/panelbinding.vala | 64 ++++++++++++++++++++++++++-------------
 3 files changed, 55 insertions(+), 74 deletions(-)

diff --git a/ui/gtk3/emojier.vala b/ui/gtk3/emojier.vala
index 9811fde5..e23ef889 100644
--- a/ui/gtk3/emojier.vala
+++ b/ui/gtk3/emojier.vala
@@ -21,17 +21,6 @@
  */
 
 public class IBusEmojier : Gtk.ApplicationWindow {
-    private class EEntry : Gtk.SearchEntry {
-        public EEntry() {
-            GLib.Object(
-                name : "IBusEmojierEntry",
-                margin_start : 6,
-                margin_end : 6,
-                margin_top : 6,
-                margin_bottom : 6
-            );
-        }
-    }
     private class EListBox : Gtk.ListBox {
         public EListBox() {
             GLib.Object(
@@ -330,6 +319,7 @@ public class IBusEmojier : Gtk.ApplicationWindow {
     private uint m_redraw_window_id;
 
     public signal void candidate_clicked(uint index, uint button, uint state);
+    public signal void commit_text(string text);
 
     public IBusEmojier() {
         GLib.Object(
@@ -380,12 +370,6 @@ public class IBusEmojier : Gtk.ApplicationWindow {
             adjust_window_position();
         });
 
-        candidate_clicked.connect((i, b, s) => {
-            if (m_input_context_path != "")
-                candidate_panel_select_index(i, b);
-        });
-
-
         if (m_annotation_to_emojis_dict == null) {
             reload_emoji_dict();
         }
@@ -1641,34 +1625,6 @@ public class IBusEmojier : Gtk.ApplicationWindow {
     }
 
 
-    private void candidate_panel_select_index(uint index,
-                                              uint button) {
-        if (button == BUTTON_CLOSE_BUTTON) {
-            hide();
-            if (m_candidate_panel_mode &&
-                m_lookup_table.get_number_of_candidates() > 0) {
-                // Call remove_all_children() instead of show_category_list()
-                // so that show_category_list do not remove children with
-                // PageUp/PageDown.
-                remove_all_children();
-            }
-            m_result = "";
-            return;
-        }
-        string text = m_lookup_table.get_candidate(index).text;
-        unowned GLib.SList<string>? emojis =
-                m_emoji_to_emoji_variants_dict.lookup(text);
-        if (m_show_emoji_variant && emojis != null &&
-            m_backward_index < 0) {
-            show_emoji_variants(emojis);
-            show_all();
-        } else {
-            m_result = text;
-            hide();
-        }
-    }
-
-
     private void candidate_panel_cursor_down() {
         enter_notify_disable_with_timer();
         uint ncandidates = m_lookup_table.get_number_of_candidates();
@@ -1762,7 +1718,8 @@ public class IBusEmojier : Gtk.ApplicationWindow {
     }
 
 
-    public bool has_variants(uint index) {
+    public bool has_variants(uint index,
+                             bool need_commit_signal) {
         if (index >= m_lookup_table.get_number_of_candidates())
             return false;
         string text = m_lookup_table.get_candidate(index).text;
@@ -1773,6 +1730,10 @@ public class IBusEmojier : Gtk.ApplicationWindow {
             show_emoji_variants(emojis);
             return true;
         }
+        if (m_input_context_path != "")
+            m_result = text;
+        if (need_commit_signal)
+            commit_text(text);
         return false;
     }
 
@@ -1881,10 +1842,10 @@ public class IBusEmojier : Gtk.ApplicationWindow {
     }
 
 
-    public bool key_press_enter() {
+    public bool key_press_enter(bool need_commit_signal) {
         if (m_candidate_panel_is_visible) {
             uint index = m_lookup_table.get_cursor_pos();
-            return has_variants(index);
+            return has_variants(index, need_commit_signal);
         } else if (m_category_active_index >= 0) {
             Gtk.ListBoxRow gtkrow = m_list_box.get_selected_row();
             EBoxRow row = gtkrow as EBoxRow;
@@ -2282,12 +2243,10 @@ public class IBusEmojier : Gtk.ApplicationWindow {
             return true;
         case Gdk.Key.Return:
         case Gdk.Key.KP_Enter:
-            if (key_press_enter()) {
+            if (key_press_enter(true))
                 show_all();
-            } else {
-                m_result = get_current_candidate();
+            else
                 hide();
-            }
             return true;
         case Gdk.Key.space:
         case Gdk.Key.KP_Space:
diff --git a/ui/gtk3/emojierapp.vala b/ui/gtk3/emojierapp.vala
index 787d448f..fab99d9e 100644
--- a/ui/gtk3/emojierapp.vala
+++ b/ui/gtk3/emojierapp.vala
@@ -65,7 +65,7 @@ public class EmojiApplication : Gtk.Application {
         uint ncandidates = m_emojier.get_number_of_candidates();
         if (ncandidates > 0 && ncandidates >= index) {
             m_emojier.set_cursor_pos(index);
-            show_candidate = m_emojier.has_variants(index);
+            show_candidate = m_emojier.has_variants(index, false);
         } else {
             return;
         }
diff --git a/ui/gtk3/panelbinding.vala b/ui/gtk3/panelbinding.vala
index 4ebff8da..01c43b0d 100644
--- a/ui/gtk3/panelbinding.vala
+++ b/ui/gtk3/panelbinding.vala
@@ -447,13 +447,19 @@ class PanelBinding : IBus.PanelService {
     }
 
 
-    private void commit_text_update_favorites(IBus.Text text) {
+    private void commit_text_update_favorites(IBus.Text text,
+                                              bool      disable_extension) {
         commit_text(text);
-        IBus.ExtensionEvent event = new IBus.ExtensionEvent(
+
+        // If disable_extension is false, the extension event is already
+        // sent before the focus-in is received.
+        if (disable_extension) {
+            IBus.ExtensionEvent event = new IBus.ExtensionEvent(
                     "name", m_extension_name,
                     "is-enabled", false,
                     "is-extension", true);
-        panel_extension(event);
+            panel_extension(event);
+        }
         string committed_string = text.text;
         string preedit_string = m_preedit.get_text();
         m_preedit.hide();
@@ -482,7 +488,7 @@ class PanelBinding : IBus.PanelService {
             prev_context_path != "" &&
             prev_context_path == m_current_context_path) {
             IBus.Text text = new IBus.Text.from_string(selected_string);
-            commit_text_update_favorites(text);
+            commit_text_update_favorites(text, false);
             m_emojier.reset();
             return true;
         }
@@ -564,13 +570,13 @@ class PanelBinding : IBus.PanelService {
     private bool key_press_enter() {
         if (m_extension_name != "unicode" && is_emoji_lookup_table()) {
             // Check if variats exist
-            if (m_emojier.key_press_enter()) {
+            if (m_emojier.key_press_enter(false)) {
                 convert_preedit_text();
                 return true;
             }
         }
         IBus.Text text = m_preedit.get_commit_text();
-        commit_text_update_favorites(text);
+        commit_text_update_favorites(text, true);
         return false;
     }
 
@@ -712,15 +718,10 @@ class PanelBinding : IBus.PanelService {
     }
 
 
-    private bool is_visible_wayland_lookup_table() {
-        return m_wayland_lookup_table_is_visible;
-    }
-
-
     private void hide_emoji_lookup_table() {
         if (m_emojier == null)
             return;
-        if (m_is_wayland)
+        if (m_wayland_lookup_table_is_visible)
             hide_wayland_lookup_table();
         else
             m_emojier.hide();
@@ -747,7 +748,7 @@ class PanelBinding : IBus.PanelService {
 
     private bool is_emoji_lookup_table() {
         if (m_is_wayland)
-            return is_visible_wayland_lookup_table();
+            return m_wayland_lookup_table_is_visible;
         else
             return m_emojier.get_visible();
     }
@@ -788,7 +789,8 @@ class PanelBinding : IBus.PanelService {
          */
         if (!input_context_path.has_suffix("InputContext_1")) {
             m_real_current_context_path = m_current_context_path;
-            this.emojier_focus_commit();
+            if (m_is_wayland)
+                this.emojier_focus_commit();
         }
     }
 
@@ -822,8 +824,18 @@ class PanelBinding : IBus.PanelService {
             // For title handling in gnome-shell
             m_application.add_window(m_emojier);
             m_emojier.candidate_clicked.connect((i, b, s) => {
+                candidate_clicked_lookup_table_real(i, b, s, true);
+            });
+            m_emojier.commit_text.connect((s) => {
                 if (!m_is_wayland)
-                    candidate_clicked_lookup_table(i, b, s);
+                    return;
+                // Currently emojier has a focus but the text input focus
+                // does not and commit the text later.
+                IBus.ExtensionEvent close_event = new IBus.ExtensionEvent(
+                        "name", m_extension_name,
+                        "is-enabled", false,
+                        "is-extension", true);
+                panel_extension(close_event);
             });
         }
         m_emojier.reset();
@@ -1041,9 +1053,10 @@ class PanelBinding : IBus.PanelService {
         show_preedit_and_candidate(show_candidate);
     }
 
-    public override void candidate_clicked_lookup_table(uint index,
-                                                        uint button,
-                                                        uint state) {
+    private void candidate_clicked_lookup_table_real(uint index,
+                                                     uint button,
+                                                     uint state,
+                                                     bool is_emojier) {
         if (button == IBusEmojier.BUTTON_CLOSE_BUTTON) {
             m_enable_extension = false;
             hide_emoji_lookup_table();
@@ -1061,17 +1074,26 @@ class PanelBinding : IBus.PanelService {
         uint ncandidates = m_emojier.get_number_of_candidates();
         if (ncandidates > 0 && ncandidates >= index) {
             m_emojier.set_cursor_pos(index);
-            show_candidate = m_emojier.has_variants(index);
-            m_preedit.set_emoji(m_emojier.get_current_candidate());
+            bool need_commit_signal = m_is_wayland && is_emojier;
+            show_candidate = m_emojier.has_variants(index, need_commit_signal);
+            if (!m_is_wayland)
+                m_preedit.set_emoji(m_emojier.get_current_candidate());
         } else {
             return;
         }
         if (!show_candidate) {
             IBus.Text text = m_preedit.get_commit_text();
-            commit_text_update_favorites(text);
             hide_emoji_lookup_table();
+            if (!is_emojier || !m_is_wayland)
+                commit_text_update_favorites(text, true);
             return;
         }
         show_preedit_and_candidate(show_candidate);
     }
+
+    public override void candidate_clicked_lookup_table(uint index,
+                                                        uint button,
+                                                        uint state) {
+        candidate_clicked_lookup_table_real(index, button, state, false);
+    }
 }
-- 
2.17.1

